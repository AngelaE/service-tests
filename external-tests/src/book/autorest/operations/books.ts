/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/booksMappers";
import * as Parameters from "../models/parameters";
import { BookApiClientContext } from "../bookApiClientContext";

/** Class representing a Books. */
export class Books {
  private readonly client: BookApiClientContext;

  /**
   * Create a Books.
   * @param {BookApiClientContext} client Reference to the service client.
   */
  constructor(client: BookApiClientContext) {
    this.client = client;
  }

  /**
   * @summary Get the list of all books
   * @param [options] The optional parameters
   * @returns Promise<Models.BooksGetAllResponse>
   */
  getAll(options?: msRest.RequestOptionsBase): Promise<Models.BooksGetAllResponse>;
  /**
   * @param callback The callback
   */
  getAll(callback: msRest.ServiceCallback<Models.Book[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Book[]>): void;
  getAll(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Book[]>, callback?: msRest.ServiceCallback<Models.Book[]>): Promise<Models.BooksGetAllResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllOperationSpec,
      callback) as Promise<Models.BooksGetAllResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.BooksStoreBookResponse>
   */
  storeBook(options?: Models.BooksStoreBookOptionalParams): Promise<Models.BooksStoreBookResponse>;
  /**
   * @param callback The callback
   */
  storeBook(callback: msRest.ServiceCallback<Models.Book>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  storeBook(options: Models.BooksStoreBookOptionalParams, callback: msRest.ServiceCallback<Models.Book>): void;
  storeBook(options?: Models.BooksStoreBookOptionalParams | msRest.ServiceCallback<Models.Book>, callback?: msRest.ServiceCallback<Models.Book>): Promise<Models.BooksStoreBookResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      storeBookOperationSpec,
      callback) as Promise<Models.BooksStoreBookResponse>;
  }

  /**
   * @param bookId
   * @param [options] The optional parameters
   * @returns Promise<Models.BooksGetResponse>
   */
  get(bookId: number, options?: msRest.RequestOptionsBase): Promise<Models.BooksGetResponse>;
  /**
   * @param bookId
   * @param callback The callback
   */
  get(bookId: number, callback: msRest.ServiceCallback<Models.BookWithStats>): void;
  /**
   * @param bookId
   * @param options The optional parameters
   * @param callback The callback
   */
  get(bookId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BookWithStats>): void;
  get(bookId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BookWithStats>, callback?: msRest.ServiceCallback<Models.BookWithStats>): Promise<Models.BooksGetResponse> {
    return this.client.sendOperationRequest(
      {
        bookId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BooksGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Books",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Book"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const storeBookOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Books",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Book
  },
  responses: {
    200: {
      bodyMapper: Mappers.Book
    },
    default: {}
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Books/{bookId}",
  urlParameters: [
    Parameters.bookId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BookWithStats
    },
    default: {}
  },
  serializer
};
